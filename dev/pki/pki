#!/bin/bash -e

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
#ME="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"

[ -z "$PROXY1_ID" ] && ( echo "PROXY1_ID not set!"; exit 1)
[ -z "$PROXY2_ID" ] && ( echo "PROXY2_ID not set!"; exit 1)

cd $SCRIPT_DIR
export PROXY1_ID_SHORT=$(echo $PROXY1_ID | cut -d '.' -f 1)
export PROXY2_ID_SHORT=$(echo $PROXY2_ID | cut -d '.' -f 1)
export BROKER_ID=$(echo $PROXY1_ID | cut -d '.' -f 2-)
export VAULT_ADDR=http://127.0.0.1:8200

function start() {
     docker-compose up -d --no-build vault
}

function clean() {
     rm -vf *.pem *.json *.secret
     docker-compose down
}

function create_root_ca() {
     vault secrets enable pki
     vault secrets tune -max-lease-ttl=87600h pki
     vault write -field=certificate pki/root/generate/internal \
          common_name="Broker-Root" \
          issuer_name="root-2022" \
          ttl=87600h > dktk_root_2022_ca.crt.pem
     vault write pki/roles/2022-servers_root allow_any_name=true
     cp dktk_root_2022_ca.crt.pem root.crt.pem
}

function create_intermediate_ca() {
     vault secrets enable -path=samply_pki pki
     vault secrets tune -max-lease-ttl=43800h samply_pki
     vault write -format=json samply_pki/intermediate/generate/internal \
          common_name="$BROKER_ID Intermediate Authority" \
          issuer_name="$BROKER_ID-intermediate" \
          | jq -r '.data.csr' > pki_hd_intermediate.csr.pem
     vault write -format=json pki/root/sign-intermediate \
          issuer_ref="root-2022" \
          csr=@pki_hd_intermediate.csr.pem \
          format=pem_bundle ttl="43800h" \
          | jq -r '.data.certificate' > hd_intermediate.crt.pem
     vault write samply_pki/intermediate/set-signed certificate=@hd_intermediate.crt.pem
     vault write samply_pki/roles/hd-dot-dktk-dot-com \
          issuer_ref="$(vault read -field=default samply_pki/config/issuers)" \
          allowed_domains="$BROKER_ID" \
          allow_subdomains=true \
          allow_glob_domains=true \
          max_ttl="720h"
}

function request_proxy() {
     application="${1:-app1}"
     ttl="${2:-24h}"
     cn="${application}.$BROKER_ID"
     request "$application" "$cn" "$ttl" 
}

function revoke_proxy() {
     application="${1:-app1}"
     cn="${application}.$BROKER_ID"
     revoke "$cn"
}

function revoke() {
     cn="${1}"
     CERTS=$(curl \
    --header "X-Vault-Token: $VAULT_TOKEN" \
    --silent \
    --request LIST \
    $VAULT_ADDR/v1/samply_pki/certs | jq .data.keys | tr -d "[]\",")
     for cert in ${CERTS}; do
          cert_cn=$(curl -H "X-Vault-Token: $VAULT_TOKEN" -X GET --silent -q  $VAULT_ADDR/v1/samply_pki/cert/$cert/raw/pem | openssl x509 -noout -text | awk -F'=' '/Subject:/{print  $2}')
          if [[ "$(echo $cert_cn | xargs echo)" == "$(echo $cn | xargs echo)" ]]; then # xargs is used to trim whitespace
               echo "Revoking $cert_cn, $cert"
               curl \
                   --header "X-Vault-Token: $VAULT_TOKEN" \
                   --request POST \
                   --silent \
                   --data "{\"serial_number\": \"$cert\"}" \
                   $VAULT_ADDR/v1/samply_pki/revoke
          fi
          revocation_time=$(curl -H "X-Vault-Token: $VAULT_TOKEN" --silent -X GET -q  http://localhost:8200/v1/samply_pki/cert/$cert | jq .data.revocation_time_rfc3339)
          if [[ "$revocation_time" == "" ]]; then
               echo "Error revoking certificate $cert"
          fi
     done
}

function request() {
     application=$1
     cn=$2
     ttl=$3
     data="{\"common_name\": \"$cn\", \"ttl\": \"$ttl\"}"
     echo $data
     echo "Creating Certificate for domain $cn"
     curl --header "X-Vault-Token: $VAULT_TOKEN" \
          --request POST \
          --data "$data" \
          --no-progress-meter \
     $VAULT_ADDR/v1/samply_pki/issue/hd-dot-dktk-dot-com | jq > ${application}.json
     cat ${application}.json | jq -r .data.certificate > ${application}.crt.pem
     cat ${application}.json | jq -r .data.ca_chain[] > ${application}.chain.pem
     cat ${application}.json | jq -r .data.private_key > ${application}.priv.pem
     echo "Success: PEM files stored to ${application}*.pem"
}

function setup() {
    clean
    touch ${PROXY1_ID_SHORT}.priv.pem # see https://github.com/docker/compose/issues/8305
    touch ${PROXY2_ID_SHORT}.priv.pem # see https://github.com/docker/compose/issues/8305
    touch test1.priv.pem # see https://github.com/docker/compose/issues/8305
    touch test2.priv.pem # see https://github.com/docker/compose/issues/8305
    #touch root.crt.pem # see https://github.com/docker/compose/issues/8305
    start
    while ! [ "$(curl -s $VAULT_ADDR/v1/sys/health | jq -r .sealed)" == "false" ]; do echo "Waiting ..."; sleep 0.1; done
    docker compose exec -T vault sh -c "https_proxy=$http_proxy apk add --no-cache bash curl jq"
    docker compose exec -T vault sh -c "VAULT_TOKEN=$VAULT_TOKEN http_proxy= HTTP_PROXY= PROXY1_ID=$PROXY1_ID PROXY2_ID=$PROXY2_ID /pki/pki init"
    docker compose exec -T vault sh -c "VAULT_TOKEN=$VAULT_TOKEN http_proxy= HTTP_PROXY= PROXY1_ID=$PROXY1_ID PROXY2_ID=$PROXY2_ID /pki/pki request_proxy $PROXY1_ID_SHORT" "24h"
    docker compose exec -T vault sh -c "VAULT_TOKEN=$VAULT_TOKEN http_proxy= HTTP_PROXY= PROXY1_ID=$PROXY1_ID PROXY2_ID=$PROXY2_ID /pki/pki request_proxy $PROXY2_ID_SHORT" "24h"
    docker compose exec -T vault sh -c "VAULT_TOKEN=$VAULT_TOKEN http_proxy= HTTP_PROXY= PROXY1_ID=$PROXY1_ID PROXY2_ID=$PROXY2_ID /pki/pki request_proxy dummy" "24h"
}

function init() {
     echo "Creating Root CA"
     create_root_ca

     echo "Creating Intermediate HD CA"
     create_intermediate_ca

     echo "Successfully completed 'init'."
}

case "$1" in
     start)
          start
          ;;
     clean)
          clean
          ;;
     init)
          init
          ;;
     request_proxy)
          request_proxy $2 $3
          ;;
     revoke_proxy)
          revoke_proxy "$2"
          ;;
     devsetup)
          setup
          docker compose exec -T vault sh -c "VAULT_TOKEN=$VAULT_TOKEN http_proxy= HTTP_PROXY= PROXY1_ID=$PROXY1_ID PROXY2_ID=$PROXY2_ID /pki/pki request_proxy $PROXY2_ID_SHORT" "24h" # Duplicate certificate for testing
          docker compose exec -T vault sh -c "VAULT_TOKEN=$VAULT_TOKEN http_proxy= HTTP_PROXY= PROXY1_ID=$PROXY1_ID PROXY2_ID=$PROXY2_ID /pki/pki request_proxy test1 2s" # Expired certificate for testing
          docker compose exec -T vault sh -c "VAULT_TOKEN=$VAULT_TOKEN http_proxy= HTTP_PROXY= PROXY1_ID=$PROXY1_ID PROXY2_ID=$PROXY2_ID /pki/pki request_proxy test2 2s" # Expired certificate for testing
          docker compose exec -T vault sh -c "VAULT_TOKEN=$VAULT_TOKEN http_proxy= HTTP_PROXY= PROXY1_ID=$PROXY1_ID PROXY2_ID=$PROXY2_ID /pki/pki request_proxy $PROXY2_ID_SHORT" "24h" # Duplicate certificate for testing
          docker compose exec -T vault sh -c "VAULT_TOKEN=$VAULT_TOKEN http_proxy= HTTP_PROXY= PROXY1_ID=$PROXY1_ID PROXY2_ID=$PROXY2_ID /pki/pki request_proxy invalid.proxy.id" "24h" # Invalid proxy id cert for testing
          $SCRIPT_DIR/pki request_proxy test3 24h # Certificate for revokation testing
          $SCRIPT_DIR/pki revoke_proxy test3 # Revokation testing

          ;;
     setup)
          setup
          ;;
     *)
          echo "Usage: $0 start|setup|devsetup|init|(request [AppName])"
          ;;
esac
