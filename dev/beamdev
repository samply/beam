#!/bin/bash -e

# https://stackoverflow.com/questions/59895/
SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SD=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

cd $SD

source $SD/example_json.sh

if [ -z "$RUST_LOG" ]; then
     export RUST_LOG=""
fi

export PROXY1_ID=${PROXY1_ID:-proxy1.broker}
export PROXY2_ID=${PROXY2_ID:-proxy2.broker}
export PROXY1_ID_SHORT=$(echo $PROXY1_ID | cut -d '.' -f 1)
export PROXY2_ID_SHORT=$(echo $PROXY2_ID | cut -d '.' -f 1)
export BROKER_ID=$(echo $PROXY1_ID | cut -d '.' -f 2-)
export BROKER_URL=http://broker:8080
export APP1_ID_SHORT=app1
export APP2_ID_SHORT=app2
export APP1_P1=${APP1_ID_SHORT}.$PROXY1_ID
export APP2_P1=${APP2_ID_SHORT}.$PROXY1_ID
export APP1_P2=${APP1_ID_SHORT}.$PROXY2_ID
export APP2_P2=${APP2_ID_SHORT}.$PROXY2_ID
export APP_KEY=App1Secret
export BROKER_MONITORING_KEY=SuperSecretKey
export RUST_LOG=${RUST_LOG:-info}

export VAULT_TOKEN=$(echo $RANDOM | md5sum | head -c 20; echo;)

export P1="http://localhost:8081" # for scripts
export P2="http://localhost:8082" # for scripts

export ARCH=$(docker version --format "{{.Server.Arch}}")

function check_prereqs() {
     set +e
     if [[ "$(curl --version)" != *" libcurl/"* ]]; then
          echo "curl not found -- please install curl >= 7.7.0 and put into PATH."
          exit 1
     fi
     if [[ "$(jq --version)" != *"jq-"* ]]; then
          echo "jq not found -- please install and put into PATH."
          exit 1
     fi
     if [[ "$(rsync --version)" != *"rsync  version"* ]]; then
          echo "rsync not found -- please install and put into PATH."
          exit 1
     fi
     set -e
}

function build() {
    BUILD_DOCKER=0
    BACK=$(pwd)
    cd $SD/..
    BROKER=./target/debug/broker
    PROXY=./target/debug/proxy
    if [ ! -x ./artifacts/binaries-$ARCH ]; then
        echo "Binaries missing -- building ..."
        BUILD="$(cargo build $@ --message-format=json)"
        echo "Will rebuild docker image since binaries had not been there."
        mkdir -p artifacts/binaries-$ARCH
        rsync "$BROKER" "$PROXY" artifacts/binaries-$ARCH/
        BUILD_DOCKER=1
    elif [ -z "$(docker images -q samply/beam-broker:$TAG)" ] || [ -z "$(docker images -q samply/beam-proxy:$TAG)" ]; then
        echo "Will rebuild docker image since it is missing."
        BUILD_DOCKER=1
    elif [ -x ./target ]; then
        echo "Checking for changed Rust source code ..."
        BUILD="$(cargo build $@ --message-format=json)"
        if echo $BUILD | jq 'select(.fresh==false)' | grep -q 'fresh'; then
            echo "Will rebuild docker image due to changes in rust binaries."
            rsync "$BROKER" "$PROXY" artifacts/binaries-$ARCH/
            BUILD_DOCKER=1
        fi
    fi
    if [ $BUILD_DOCKER -eq 1 ]; then
        build_docker
    else
        echo "Not rebuilding docker image since nothing has changed."
    fi
    cd $BACK
}

function build_docker() {
    BACK2=$(pwd)
    cd $SD
    docker-compose build --build-arg TARGETARCH=$ARCH
    cd $BACK2
}

function clean() {
    stop
    rm -rfv artifacts/
}

function start {
    clean
    pki/pki devsetup
    echo "$VAULT_TOKEN" > ./pki/pki.secret
    build $@
    docker compose up --no-build --no-recreate -d
    docker compose logs -f
}

function demo {
    if [ "$(git rev-parse --abbrev-ref HEAD)" == "main" ]; then
        export TAG=main
    else
        echo "You have checked out a non-main branch of beam. We will launch the latest develop version of beam. Your working copy remains untouched. In case of any problems, please switch to a clean develop branch."
        export TAG=develop
    fi
    clean
    pki/pki setup
    echo "$VAULT_TOKEN" > ./pki/pki.secret
    docker-compose up --no-build --no-recreate --abort-on-container-exit
}

function start_bg {
    clean
    pki/pki devsetup
    echo "$VAULT_TOKEN" > ./pki/pki.secret
    build $@
    docker-compose up --no-build --no-recreate -d
    for ADDR in $P1 $P2; do
        TRIES=1
        while [ $TRIES -ne 0 ]; do
            set +e
            CODE=$(curl -s -o /tmp/body -w '%{response_code}' $ADDR/v1/health)
            set -e
            if [ "$CODE" == "200" ]; then
                TRIES=0
            else
                echo "Waiting for $ADDR ... (try ${TRIES}/30, last response was: code=$OUT, body=\"$(cat /tmp/body 2>/dev/null)\")"
                sleep 1
                ((TRIES=TRIES+1))
                if [ $TRIES -ge 30 ]; then
                    echo "ERROR: $ADDR not available after 30 seconds. Giving up and printing docker compose logs."
                    docker-compose logs
                    exit 5
                fi
            fi
        done
    done
    echo "Services are up:"
    defaults
}

function defaults {
    echo "Broker $BROKER_ID at http://localhost:8080 (this would not be valid in production)"
    echo "$PROXY1_ID at $P1"
    echo "$PROXY2_ID at $P2"
    echo "Authenticate via header: [ Authorization: ApiKey $APP_ID_SHORT.$PROXY1_ID $APP_KEY ]"
}

function stop {
    clean
}

function clean {
    docker-compose down
    rm -fv pki/*.pem pki/*.json pki/pki.secret
    pki/pki clean
}

COL_NONE='\033[0m'
COL_RED='\033[0;31m'
COL_GREEN='\033[0;32m'
COL_BLUE='\033[0;34m'

function testing {
    echo -e "${COL_BLUE}TEST: $@${COL_NONE}"
}

function fail {
    JSON="$1"
    shift
    echo -e "${COL_RED}FAIL $@${COL_NONE}"
    echo -e "Failed Response: $JSON"
    (exit 1)
}

function success {
    echo -e "  ${COL_GREEN}OK${COL_NONE}"
}

function curl_get {
    APP_ID="$1"
    shift
    BODY_FILE=$(mktemp)
    JSON=$(curl -s -H "content-type: application/json" -H "Authorization: ApiKey $APP_ID $APP_KEY" -w %{json} -o $BODY_FILE $@)
    BODY=$(cat $BODY_FILE | sed 's/\"/\\\"/g')
    JSON=$(echo "$JSON" | jq ". + {\"body\": \"${BODY}\" }")
    rm $BODY_FILE
    echo "$JSON"
}

function curl_get_sse {
    APP_ID="$1"
    shift
    BODY_FILE=$(mktemp)
    JSON=$(curl -s -H "content-type: application/json" -H "Authorization: ApiKey $APP_ID $APP_KEY" -H "Accept: text/event-stream" -w %{json} -o $BODY_FILE $@)
    BODY=$(cat $BODY_FILE | sed 's/\"/\\\"/g')
    JSON=$(echo "$JSON" | jq ". + {\"body\": \"${BODY}\" }")
    rm $BODY_FILE
    echo "$JSON"
}

function curl_put {
    APP_ID="$1"
    shift
    BODY_FILE=$(mktemp)
    JSON=$(curl -X PUT -s -H "content-type: application/json" -H "Authorization: ApiKey $APP_ID $APP_KEY" -d @- -w %{json} -o $BODY_FILE $@)
    BODY=$(cat $BODY_FILE | sed 's/\"/\\\"/g')
    JSON=$(echo "$JSON" | jq ". + {\"body\": \"${BODY}\" }")
    rm $BODY_FILE
    echo "$JSON"
}

function curl_post {
    APP_ID="$1"
    shift
    BODY_FILE=$(mktemp)
    JSON=$(curl -s -H "content-type: application/json" -H "Authorization: ApiKey $APP_ID $APP_KEY" -d @- -w %{json} -o $BODY_FILE $@)
    BODY=$(cat $BODY_FILE | sed 's/\"/\\\"/g')
    JSON=$(echo "$JSON" | jq ". + {\"body\": \"${BODY}\" }")
    rm $BODY_FILE
    echo "$JSON"
}

function curl_post_file {
    APP_ID="$1"
    FILENAME="@${2}"
    shift 2
    BODY_FILE=$(mktemp)
    JSON=$(curl -s -H 'Expect: 100-continue' -H "content-type: application/json" -H "Authorization: ApiKey $APP_ID $APP_KEY" -d $FILENAME -w %{json} -o $BODY_FILE $@)
    BODY=$(cat $BODY_FILE | sed 's/\"/\\\"/g')
    JSON=$(echo "$JSON" | jq ". + {\"body\": \"${BODY}\" }")
    rm $BODY_FILE
    echo "$JSON"
}

function task_with_ttl {
    sed "s/\[TTL\]/\"$1\"/g"
}

export -f curl_get curl_post curl_post_file curl_put start stop clean testing fail success task_with_ttl

check_prereqs

if [ "$1" == "--tag" ]; then
    TAG="$2"
    shift 2
fi

export TAG=${TAG:-localbuild}

case "$1" in
  build)
    shift
    build $@
    ;;
  start)
    shift
    start $@
    ;;
  start_bg)
    shift
    start_bg $@
    ;;
  restart)
    shift
    build $@
    docker compose up --no-deps --no-build proxy1 proxy2 broker
    ;;
  clean)
    clean
    ;;
  stop)
    stop
    ;;
  noop)
    ;;
  demo)
    shift
    demo $@
    ;;
  defaults)
    defaults
    ;;
  *)
    echo "Usage: $0 [--tag SOMETAG, e.g. develop, to use an existing image] build|start|start_bg|restart|stop|clean|defaults|demo|noop"
    ;;
esac
