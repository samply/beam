{% if include_docs %}
# This is a jinja2 template, which allows you to deploy a dev environment for samply beam.
# To parse the template, we recommend the cli tool samply/templer (visit: https://github.com/samply/templer).
# You can generate a deployable docker-compose with the following command:
#   templer dev/docker-compose.j2 traefik=true traefik_own=true
# Alternativly, you can pipe the output directly to the docker-compose command:
#   templer dev/docker-compose.j2 traefik=true traefik_own=true | docker-compose -f - up -d
{% endif %}
version: "3.7"
{% if traefik and not traefik_own %}
networks:
  traefik:
    external: true
{% endif %}
services:
{% if traefik_own %}
  traefik:
    container_name: traefik
    image: traefik:latest
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --api.dashboard=true
      - --accesslog=true # print access-logs
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./certs:/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik
{% endif %}
  vault:
    image: vault
    ports:
      - 127.0.0.1:8200:8200
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - ./pki:/pki
    networks:
      - default
  broker:
    depends_on: [vault]
    build:
      context: ../
      dockerfile: Dockerfile.ci.broker
    image: samply/beam-broker:${TAG}
    ports:
      - 8080:8080
    environment:
      BROKER_URL: ${BROKER_URL}
      PKI_ADDRESS: http://vault:8200
      no_proxy: vault
      NO_PROXY: vault
      PRIVKEY_FILE: /run/secrets/dummy.pem
      BIND_ADDR: 0.0.0.0:8080
{% if traefik %}
    labels:
      - "traefik.enable=true"
  {% if traefik_v1 %}
      - "traefik.frontend.rule=Host:${BROKER_ID}"
  {% else %}
      - "traefik.http.routers.beam-proxy2.rule=Host=Host(`${BROKER_ID}`)"
  {% endif %}
    networks:
      - traefik
      - default
{% endif %}
    secrets:
      - pki.secret
      - dummy.pem
  proxy1:
    depends_on: [vault]
    image: samply/beam-proxy:${TAG}
    build:
      context: ../
      dockerfile: Dockerfile.ci.proxy
    ports:
      - 8081:8081
    environment:
      BROKER_URL: ${BROKER_URL}
      PROXY_ID: ${PROXY1_ID}
      PKI_ADDRESS: http://vault:8200
      APP_0_ID: ${APP1_ID_SHORT}
      APP_0_KEY: ${APP_KEY}
      APP_1_ID: ${APP2_ID_SHORT}
      APP_1_KEY: ${APP_KEY}
      no_proxy: vault
      NO_PROXY: vault
      PRIVKEY_FILE: /run/secrets/proxy1.pem
      BIND_ADDR: 0.0.0.0:8081
{% if traefik %}
    labels:
      - "traefik.enable=true"
  {% if traefik_v1 %}
      - "traefik.frontend.rule=Host:${PROXY1_ID}"
  {% else %}
      - "traefik.http.routers.beam-proxy1.rule=Host=Host(`${PROXY1_ID}`)"
  {% endif %}
    networks:
      - traefik
      - default
{% endif %}
    secrets:
      - pki.secret
      - proxy1.pem
  proxy2:
    depends_on: [vault]
    image: samply/beam-proxy:${TAG}
    build:
      context: ../
      dockerfile: Dockerfile.ci.proxy
    ports:
      - 8082:8082
    environment:
      BROKER_URL: ${BROKER_URL}
      PROXY_ID: ${PROXY2_ID}
      PKI_ADDRESS: http://vault:8200
      APP_0_ID: ${APP1_ID_SHORT}
      APP_0_KEY: ${APP_KEY}
      APP_1_ID: ${APP2_ID_SHORT}
      APP_1_KEY: ${APP_KEY}
      no_proxy: vault
      NO_PROXY: vault
      PRIVKEY_FILE: /run/secrets/proxy2.pem
      BIND_ADDR: 0.0.0.0:8082
{% if traefik %}
    labels:
      - "traefik.enable=true"
  {% if traefik_v1 %}
      - "traefik.frontend.rule=Host:${PROXY2_ID}"
  {% else %}
      - "traefik.http.routers.beam-proxy2.rule=Host=Host(`${PROXY2_ID}`)"
  {% endif %}
    networks:
      - traefik
      - default
{% endif %}
    secrets:
      - pki.secret
      - proxy2.pem
secrets:
  pki.secret:
    file: ./pki/pki.secret
  proxy1.pem:
    file: ./pki/${PROXY1_ID_SHORT}.priv.pem
  proxy2.pem:
    file: ./pki/${PROXY2_ID_SHORT}.priv.pem
  dummy.pem:
    file: ./pki/dummy.priv.pem
