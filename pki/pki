#!/bin/bash -e

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

export VAULT_ADDR=http://127.0.0.1:8200
export VAULT_TOKEN=root
export LISTEN_ADDR=0.0.0.0:8200
export DOMAIN="broker.samply.de"
export PATH=$PATH:$SCRIPT_DIR

function check_prereqs() {
     set +e
     if [[ "$(vault version)" != *", built "* ]]; then
          echo "vault not found -- downloading ..."
          wget -nv -O - https://releases.hashicorp.com/vault/1.11.0/vault_1.11.0_linux_amd64.zip | zcat > vault
          chmod +x vault
          if [[ "$(vault version)" != *", built "* ]]; then
               echo "Still failed; please download manually."
               exit 1
          fi
     fi
     if [[ "$(curl --version)" != *" libcurl/"* ]]; then
          echo "curl not found -- please install and put into PATH."
          exit 1
     fi
     if [[ "$(jq --version)" != *"jq-"* ]]; then
          echo "jq not found -- please install and put into PATH."
          exit 1
     fi
     set -e
}

function start() {
     exec vault server -dev -dev-root-token-id $VAULT_TOKEN -dev-listen-address=$LISTEN_ADDR
}

function clean() {
     rm -vf *.pem *.json
}

function create_root_ca() {
     vault secrets enable pki
     vault secrets tune -max-lease-ttl=87600h pki
     vault write -field=certificate pki/root/generate/internal \
          common_name="Broker-Root" \
          issuer_name="root-2022" \
          ttl=87600h > dktk_root_2022_ca.crt.pem
     vault write pki/roles/2022-servers_root allow_any_name=true
}

function create_intermediate_ca() {
     vault secrets enable -path=samply_pki pki
     vault secrets tune -max-lease-ttl=43800h samply_pki
     vault write -format=json samply_pki/intermediate/generate/internal \
          common_name="$DOMAIN Intermediate Authority" \
          issuer_name="$DOMAIN-intermediate" \
          | jq -r '.data.csr' > pki_hd_intermediate.csr.pem
     vault write -format=json pki/root/sign-intermediate \
          issuer_ref="root-2022" \
          csr=@pki_hd_intermediate.csr.pem \
          format=pem_bundle ttl="43800h" \
          | jq -r '.data.certificate' > hd_intermediate.crt.pem
     vault write samply_pki/intermediate/set-signed certificate=@hd_intermediate.crt.pem
     vault write samply_pki/roles/hd-dot-dktk-dot-com \
          issuer_ref="$(./vault read -field=default samply_pki/config/issuers)" \
          allowed_domains="$DOMAIN" \
          allow_subdomains=true \
          allow_glob_domains=true \
          max_ttl="720h"
}

function request() {
     application="${1:-app1}"
     cn="${application}.$DOMAIN"
     data="{\"common_name\": \"$cn\", \"ttl\": \"24h\"}"
     echo $data
     echo "Creating Certificate for domain $cn"
     curl --header "X-Vault-Token: $VAULT_TOKEN" \
          --request POST \
          --data "$data" \
          --no-progress-meter \
     $VAULT_ADDR/v1/samply_pki/issue/hd-dot-dktk-dot-com | jq > ${application}.json
     cat ${application}.json | jq -r .data.certificate > ${application}.crt.pem
     cat ${application}.json | jq -r .data.ca_chain[] > ${application}.chain.pem
     cat ${application}.json | jq -r .data.private_key > ${application}.priv.pem
     echo "Success: PEM files stored to ${application}*.pem"
}

function init() {
     echo "Cleaning Up Old Certificates and Keys"
     clean

     echo "Creating Root CA"
     create_root_ca

     echo "Creating Intermediate HD CA"
     create_intermediate_ca

     echo "Successfully completed 'init'."
}

cd $SCRIPT_DIR

check_prereqs

case "$1" in
     start)
          start
          ;;
     clean)
          clean
          ;;
     init)
          init
          ;;
     request)
          request $2
          ;;
     devsetup)
          set -m # job control
          clean
          (sleep 3
          init
          request client1
          request client2
          request test) &
          start
          ;;
     *)
          echo "Usage: $0 start|init|(request [AppName])"
          ;;
esac
